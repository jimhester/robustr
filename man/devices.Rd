% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/devices.R
\name{devices}
\alias{devices}
\alias{with_bmp}
\alias{with_cairo_pdf}
\alias{with_cairo_ps}
\alias{with_dev}
\alias{with_device}
\alias{with_jpeg}
\alias{with_pdf}
\alias{with_png}
\alias{with_postscript}
\alias{with_svg}
\alias{with_tiff}
\alias{with_xfig}
\title{Graphics devices}
\usage{
with_bmp(new, code, width = 480, height = 480, units = "px",
  pointsize = 12, bg = "white", res = NA, family = "sans",
  restoreConsole = TRUE, type = c("windows", "cairo"),
  antialias = c("default", "none", "cleartype", "gray", "subpixel"))

with_cairo_pdf(new, code, width = 7, height = 7, pointsize = 12,
  onefile = FALSE, family = "sans", bg = "white",
  antialias = c("default", "none", "gray", "subpixel"),
  fallback_resolution = 300)

with_cairo_ps(new, code, width = 7, height = 7, pointsize = 12,
  onefile = FALSE, family = "sans", bg = "white",
  antialias = c("default", "none", "gray", "subpixel"),
  fallback_resolution = 300)

with_jpeg(new, code, width = 480, height = 480, units = "px",
  pointsize = 12, quality = 75, bg = "white", res = NA,
  family = "sans", restoreConsole = TRUE, type = c("windows", "cairo"),
  antialias = c("default", "none", "cleartype", "gray", "subpixel"))

with_pdf(new, code, width, height, onefile, family, title, fonts, version,
  paper, encoding, bg, fg, pointsize, pagecentre, colormodel, useDingbats,
  useKerning, fillOddEven, compress)

with_png(new, code, width = 480, height = 480, units = "px",
  pointsize = 12, bg = "white", res = NA, family = "sans",
  restoreConsole = TRUE, type = c("windows", "cairo", "cairo-png"),
  antialias = c("default", "none", "cleartype", "gray", "subpixel"))

with_postscript(new, code, onefile, family, title, fonts, encoding, bg, fg,
  width, height, horizontal, pointsize, paper, pagecentre, print.it, command,
  colormodel, useKerning, fillOddEven)

with_svg(new, code, width = 7, height = 7, pointsize = 12,
  onefile = FALSE, family = "sans", bg = "white",
  antialias = c("default", "none", "gray", "subpixel"))

with_tiff(new, code, width = 480, height = 480, units = "px",
  pointsize = 12, compression = c("none", "rle", "lzw", "jpeg", "zip",
  "lzw+p", "zip+p"), bg = "white", res = NA, family = "sans",
  restoreConsole = TRUE, type = c("windows", "cairo"),
  antialias = c("default", "none", "cleartype", "gray", "subpixel"))

with_xfig(new, code, onefile = FALSE, encoding = "none",
  paper = "default", horizontal = TRUE, width = 0, height = 0,
  family = "Helvetica", pointsize = 12, bg = "transparent",
  fg = "black", pagecentre = TRUE, defaultfont = FALSE,
  textspecial = FALSE)
}
\arguments{
\item{new}{\code{[named character]}\cr New graphics device}

\item{code}{\code{[any]}\cr Code to execute in the temporary environment}

\item{width}{the width of the device.}

\item{height}{the height of the device.}

\item{units}{The units in which \code{height} and \code{width} are
    given.  Can be \code{px} (pixels, the default), \code{in} (inches),
    \code{cm} or \code{mm}.}

\item{pointsize}{the default pointsize of plotted text, interpreted as
    big points (1/72 inch) at \code{res} ppi.}

\item{bg}{the initial background colour: can be overridden by setting
    par("bg").}

\item{res}{The nominal resolution in ppi which will be recorded in the
    bitmap file, if a positive integer.  Also used for units other than
    the default.  If not specified, taken as 72 ppi to set the size of
    text and line widths.}

\item{family}{A length-one character vector specifying the default
    font family.  The default means to use the font numbers on the
    Windows GDI versions and \code{"sans"} on the cairographics
    versions.}

\item{restoreConsole}{See the \sQuote{Details} section of
    \code{\link{windows}}.  For \code{type == "windows"} only.}

\item{type}{Should be plotting be done using Windows GDI or cairographics?}

\item{antialias}{Length-one character vector.

    For allowed values and their effect on fonts with \code{type =
      "windows"} see \code{\link{windows}}: for that type if the
    argument is missing the default is taken from
    \code{windows.options()$bitmap.aa.win}.

    For allowed values and their effect (on fonts and lines, but not
    fills) with \code{type = "cairo"} see \code{\link{svg}}.}

\item{onefile}{should all plots appear in one file or in separate files?}

\item{fallback_resolution}{numeric: the resolution in dpi used when
    falling back to bitmap output.  Prior to \R 3.3.0 this depended on
    the cairo implementation but was commonly 300.}

\item{quality}{the \sQuote{quality} of the JPEG image, as a
    percentage.  Smaller values will give more compression but also more
    degradation of the image.}

\item{title}{title string to embed as the \code{/Title} field in the file. 
Defaults to \code{"R Graphics Output"}.}

\item{fonts}{a character vector specifying R graphics font family names for 
additional fonts which will be included in the PDF file. Defaults to 
\code{NULL}.}

\item{version}{a string describing the PDF version that will be required to 
view the output. This is a minimum, and will be increased (with a warning) if 
necessary. Defaults to "1.4", but see 'Details' section of 
\code{\link[grDevices]{pdf}}.}

\item{paper}{the size of paper region.  The choices
    are \code{"A4"}, \code{"Letter"} and \code{"Legal"} (and these
    can be lowercase).  A further choice is \code{"default"}, which
    is the default.  If this is selected, the papersize is taken
    from the option \code{"papersize"} if that is set to a non-empty
    value, otherwise \code{"A4"}.}

\item{encoding}{The encoding in which to write text strings.  The
    default is not to re-encode.  This can be any encoding recognized by
    \code{\link{iconv}}: in a Western UTF-8 locale you probably want to
    select an 8-bit encoding such as \code{latin1}, and in an East Asian
    locale an \code{EUC} encoding.  If re-encoding fails, the text
    strings will be written in the current encoding with a warning.}

\item{fg}{the initial foreground color to be used.}

\item{pagecentre}{logical: should the device region be centred on the
    page?}

\item{colormodel}{a character string describing the color model: currently 
allowed values are "srgb", "gray" (or "grey") and "cmyk". Defaults to "srgb". 
See section 'Color models' of \code{\link[grDevices]{pdf}}.}

\item{useDingbats}{logical. Should small circles be rendered via the Dingbats
font? Defaults to \code{TRUE}, which produces smaller and better output. 
Setting this to \code{FALSE} can work around font display problems in broken 
PDF viewers: although this font is one of the 14 guaranteed to be available 
in all PDF viewers, that guarantee is not always honoured.}

\item{useKerning}{logical. Should kerning corrections be included in setting 
text and calculating string widths? Defaults to \code{TRUE}.}

\item{fillOddEven}{logical controlling the polygon fill mode: see polygon for 
details. Defaults to \code{FALSE}.}

\item{compress}{logical. Should PDF streams be generated with Flate 
compression? Defaults to \code{TRUE}.}

\item{horizontal}{the orientation of the printed image, a
    logical.  Defaults to true, that is landscape orientation.}

\item{print.it}{logical: should the file be printed when the device is 
closed? (This only applies if \code{file} is a real file name.) Defaults to 
\code{FALSE}.}

\item{command}{the command to be used for ‘printing’. Defaults to 
\code{"default"}, the value of option \code{"printcmd"}. The length limit is 
\code{2*PATH_MAX}, 520 bytes on Windows and 8096 bytes on Unix-alikes.}

\item{compression}{the type of compression to be used.}

\item{defaultfont}{logical: should the device use xfig's default
    font?}

\item{textspecial}{logical: should the device set the textspecial flag
  for all text elements. This is useful when generating pstex from xfig
  figures.}
}
\value{
\code{[any]}\cr The results of the evaluation of the \code{code}
  argument.
}
\description{
Temporarily use a graphics device.
}
\section{Functions}{
\itemize{
\item \code{with_bmp}: BMP device

\item \code{with_cairo_pdf}: PDF device, using cairo graphics API

\item \code{with_cairo_ps}: POSTSCRIPT device, using cairo graphics API

\item \code{with_jpeg}: JPEG device

\item \code{with_pdf}: PDF device

\item \code{with_png}: PNG device

\item \code{with_postscript}: POSTSCRIPT device

\item \code{with_svg}: SVG device

\item \code{with_tiff}: TIFF device

\item \code{with_xfig}: XFIG device
}}
\examples{
# dimensions are in inches
with_pdf(
  c(file = file.path(tempdir(), "test.pdf"), width = 7, height = 5), 
  plot(runif(5))
)

# dimensions are in pixels
with_png(
  c(file = file.path(tempdir(), "test.png"), width = 800, height = 600), 
  plot(runif(5))
)
}
\seealso{
\code{\link{withr}} for examples

\code{\link[grDevices]{Devices}}
}

